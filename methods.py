import pandas as pd
import random
import matplotlib.pyplot as plt
import numpy as np
import statistics

#read in dataset and change name of first column
pdfdataset = pd.read_csv("C:/Users/hanna/Downloads/PDFMalware2022.csv")
pdfdataset.rename(columns = {'Fine name':"File Name"}, inplace = True)
pdfdataset.head()

#number of malicious vs benign
classes_count = pdfdataset['Class'].value_counts()
plt.figure()
plt.pie(classes_count, labels=classes_count.index, autopct='%1.1f%%')
plt.title('Class Distribution')
plt.show()

# CREATE COPIES OF ORIGINAL DATASET FOR MALICIOUS AND BENIGN CLASS (ESSENTIALLY FILTERING EACH DATASET BY BENIGN AND MALICIOUS)
benign_df = pdfdataset.query('Class == "Benign"')
malicious_df =  pdfdataset.query('Class == "Malicious"')

#BOXPLOT FOR BENIGN PDF SIZE
plt.boxplot(benign_df['pdfsize'], showfliers = False, meanline=True, showmeans=True, labels=['Benign'])
plt.ylabel("Size")
plt.title("Size Boxplot for Benign PDFs")
plt.show()

#BARCHART FOR BENIGN PDF SIZE
b_size = benign_df['pdfsize'].value_counts().sort_index()
b_size = b_size.to_dict()
b_size = {key: val for key, 
            val in b_size.items() if key >= 0 and key <= 500}

plt.bar(b_size.keys(), b_size.values(), width=3)
plt.xlim([0, max(b_size.keys())])
plt.xlabel("PDF Size")
plt.ylabel("Frequency")
plt.title("Distribution of Size for Benign PDFs")
plt.axhline(max(b_size.values()),linestyle='--',label='max count = '+ str(max(b_size.values())))
plt.legend()
plt.show()

#BOXPLOT FOR BENIGN PAGE NUMBER
plt.boxplot(benign_df['pages'], showfliers = False, meanline=True, showmeans=True, labels=['Benign'])
plt.ylabel("Number of Pages")
plt.title("Page Boxplot for Benign PDFs")
plt.show()

#BARCHART FOR BENIGN PAGE NUMBER
b_size = benign_df['pages'].value_counts().sort_index()
b_size = b_size.to_dict()
b_size = {key: val for key, 
            val in b_size.items() if key >= 0}

plt.bar(b_size.keys(), b_size.values(), width=3)
plt.yscale("log")
plt.xlim([0, max(b_size.keys())])
plt.xlabel("Number of Pages")
plt.ylabel("Frequency")
plt.title("Distribution of Page Number for Benign PDFs")
plt.axhline(max(b_size.values()),linestyle='--',label='max count = '+ str(max(b_size.values())))
plt.legend()
plt.show()

#5 NUMBER SUMMARY FOR BENIGN PAGE NUMBER
benign_df['pages'].describe()

#BOXPLOT FOR MALICIOUS PDF SIZE
plt.boxplot(malicious_df['pdfsize'], showfliers = False, meanline=True, showmeans=True, labels=['Malicious'])
plt.ylabel("Size")
plt.title("Size Boxplot for Malicious PDFs")
plt.show()

#BARCHART FOR MALICIOUS PDF SIZE
m_size = malicious_df['pdfsize'].value_counts().sort_index()
m_size = m_size.to_dict()
m_size = {key: val for key, 
            val in m_size.items() if key >= 0 and key <= 2500}

plt.bar(m_size.keys(), m_size.values(), width=8)
plt.xlim([0, max(m_size.keys())])
plt.xlabel("PDF Size")
plt.ylabel("Frequency")
plt.title("Distribution of Size for Malicious PDFs")
plt.yscale("log")
plt.axhline(max(m_size.values()),linestyle='--',label='max count = '+ str(max(m_size.values())))
plt.legend()
plt.show()

#BOXPLOT FOR MALICIOUS PAGE NUMBER
plt.boxplot(malicious_df['pages'], showfliers = False, meanline=True, showmeans=True, labels=['Malicious'])
plt.ylabel("Number of Pages")
plt.title("Page Boxplot for Malicious PDFs")
plt.show()

#BARCHART FOR MALICIOUS PAGE NUMBER
m_size = malicious_df['pages'].value_counts().sort_index()
m_size = m_size.to_dict()
m_size = {key: val for key, 
            val in m_size.items() if key >= 0 and key < 500}

plt.bar(m_size.keys(), m_size.values(), width=8)
plt.yscale("log")
plt.xlim([0, max(m_size.keys())])
plt.xlabel("Number of Pages")
plt.ylabel("Frequency")
plt.title("Distribution of Page Number for Malicious PDFs")
plt.axhline(max(m_size.values()),linestyle='--',label='max count = '+ str(max(m_size.values())))
plt.legend()
plt.show()

#5 NUMBER SUMMARY FOR BENIGN PAGE NUMBER
malicious_df['pages'].describe()

#PYCHART DISPLAYING BENIGN PDF vs # OF IMAGES IN EACH BENIGN PDF
#group all of the pages >5 into a group to 5+
image_count_b = benign_df['images'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(image_count_b, labels=image_count_b.index, autopct='%1.1f%%')
plt.title('Benign PDF Image Count')
plt.show()

#PIE CHART FOR BENIGN IMAGES
imagesb = benign_df['images']
imagesb = imagesb.to_numpy()

for i in range(0,len(imagesb)):
    if imagesb[i] != '0' and imagesb[i] != '1' and imagesb[i] != '2' and imagesb[i] != '-1':
        imagesb[i] = '3+'
    
benign_df['images'] = imagesb
image_count_b = benign_df['images'].value_counts()
plt.pie(image_count_b, labels=image_count_b.index, autopct='%1.1f%%')
plt.title('Benign PDF Image Count')
plt.show()

#PIE CHART FOR MALICOUS IMAGES
imagesm = malicious_df['images']
imagesm = imagesm.to_numpy()

for i in range(0,len(imagesm)):
    if imagesm[i] != '0' and imagesm[i] != '1' and imagesm[i] != '2' and imagesm[i] != '-1':
        imagesm[i] = '3+'
    
malicious_df['images'] = imagesm
image_count_m = malicious_df['images'].value_counts()
plt.pie(image_count_m, labels=image_count_m.index, autopct='%1.1f%%')
plt.title('Malicious PDF Image Count')
plt.show()

#PIE CHART FOR BENIGN COLORS
colorsb = benign_df['Colors'].astype(object).to_numpy()

for i in range(0,len(colorsb)):
    if colorsb[i] != 0.0 and colorsb[i] != 1.0 and colorsb[i] != 2.0 and colorsb[i] != -1.0:
        colorsb[i] = '3+'
    
benign_df['Colors'] = colorsb
colors_count_b = benign_df['Colors'].value_counts()
plt.pie(colors_count_b, labels=colors_count_b.index, autopct='%1.1f%%')
plt.title('Benign Colors Count')
plt.show()

#PIE CHART FOR MALICIOUS COLORS
colorsm = malicious_df['Colors'].astype(object).to_numpy()

for i in range(0,len(colorsm)):
    if colorsm[i] != 0.0 and colorsm[i] != 1.0 and colorsm[i] != 2.0 and colorsm[i] != -1.0:
        colorsm[i] = '3+'
    
malicious_df['Colors'] = colorsm
colors_count_m = malicious_df['Colors'].value_counts()
plt.pie(colors_count_m, labels=colors_count_m.index, autopct='%1.1f%%')
plt.title('Malicious Colors Count')
plt.show()
